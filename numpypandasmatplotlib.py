# -*- coding: utf-8 -*-
"""NUMPYPANDASMATPLOTLIB.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ancv2qj9_HzxIdXfvlXWpHSUq3KjGsJy
"""

'''
   RULES:

   NUMPY:
1. Every dataset requires numpy for processing further because each numerical
   needs to be converted into an array. so NUMPY IS USED TO CONVERT NUMBERS INTO
   ARRAY.

2. arr=np.array([])   (syntax necessary for array)

3. arr.shape would tell you the number of rows and columns if data is 2 or more
   dimensional.

   REST LEARN FROM EXPERIMENTING THINGS YOURSELF.

   PANDAS:

1. PANDAS is used to convert any data into a proper tabular form, in a dataframe

2. You can make series through pandas and it'll show data in series.

3. Syntax for dataframe is always DataFrame. like pd.DataFrame

   MATPLOTLIB:

1. Used for graphs, if you want data visualization, you'll need this.

2. format for specifying
   xlabel('age')
   ylabel('salary')


'''

import numpy as np

mylist = [3,5,8,90,50,654]

mylist

len(mylist)

arr1=np.array(mylist)

arr1

type(arr1)

arr2=np.array([34,78,56,89,10,8,7])

#2d

arr3=np.array([[1,4,7],[7,9,0],[56,90,35],[34,79,56]])

arr3

arr3.shape

arr2.shape

arr4=np.array([[2,5],[5,78],[78,90],[56,7],[90,34]])

arr4

arr4.shape

np.arange(1,10)

arr5=np.arange(100,200)

arr5

np.arange(1,11,4)

np.arange(1,61,7)

np.zeros(10)

np.zeros(5)

np.zeros((3,4))

np.ones(4)

np.ones(11)

np.ones((11,9))

np.eye(5)

np.linspace(1,5,2)

np.linspace(1,8,2)

np.linspace(1,9,3)

np.linspace(1,5,6)

np.linspace(1,9,22)

np.random.rand(6)

np.random.rand(4,4)

np.random.randint(1,100)

np.random.randint(33,36)

arr6=np.random.randint(1,200,20)

arr6

arr6.shape

arr7=arr6.reshape(4,5)

arr7

arr6.reshape(5,4)

arr6.reshape(20,1)

arr6.reshape(10,2)

arr2

arr2.min()

arr2.max()

arr2.argmax()

arr=np.array([1,3,5,7,8,2,3,2,3,5])

arr.shape

arr.reshape(2,5)

arr.mean()

#variance
np.var(arr)

#standard deviation
np.std(arr)

np.sin(arr)

np.log(arr)

np.sqrt(3)

x_log=np.log(arr)

x_log

#since exponent is log opposite
np.exp(x_log)

arr2

arr2[3]

arr2[2:4]

arr2[2:]

arr2[:4]

arr11=np.array([[28,3,22,23],[34,90,79,30],[66,23,32,77],[22,222,33,44]])

arr11

arr11[1,1]

arr11[1:3,1:3]

arr11[1]

arr11[0:3]

arr11[2:,0:2]

arr11[0:3,2:]

arr11

#PANDAS: is the library used to convert series into dataframes,
#Its necessary to use PANDAS in your project. To tell the program that something is a table.

import numpy as np
import pandas as pd

labels=['a','b','c'] #define labels

my_data=[34,67,89] #define data in a list

arr=np.array([23,56,78])
#defining an array, calling it arr

d={'x':45,'y':67,'z':33}
#defining a dictionary

my_data

ser1=pd.Series(my_data)#converting data into series

ser1

d

ser3=pd.Series(d)

ser3

type(ser3)

ser3.shape

ser1[1]

#Dataframes ---------> 2D

ser1

ser1[0]=120

ser1

arr=np.random.randint(1,200,20)

arr

arr.shape

arr=arr.reshape(5,4)

arr

df=pd.DataFrame(arr)

df

df=pd.DataFrame(arr,columns=['dodo1','dodo2','dodo3','dodo4'],index=['a','b','c','d','e'])

df

type(df)

df1=pd.read_csv('ad.csv')

df1

df1.shape

df1.head()

df1.head(15)

df1.tail()

df1.tail(15)

df

df['dodo2']

df[['dodo2','dodo3']]

df['dodo5']=[5,34,32,22,3]

df

#ROW---->0,COLUMN---->1

df.drop('dodo5',axis=1) #By specifying axis=1, we remove dodo5 column

df

df.drop('dodo5',axis=1,inplace=True) #but youll add inplace=True, for this to be permanent

df

#ROW REVERT

#loc ===> name of row
#iloc ===> index of row

df.loc['c']

df.loc[['c','e']]

df

df.loc[['a','d']]

#df.iloc[start index row: end index row, start index col : end index col]

df

df.iloc[2]

df.iloc[1:3]

df

df.iloc[1:4,1:]

df.iloc[:,1]

df

df.iloc[0:2,1:3]#this tells us that in dataframes, first number is excluded and last is included

df.iloc[:,1:3]

df.iloc[:,1:3].values

#MATPLOTLIB: Library for graphs

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

age=np.array([1,2,3,4,5])
salary=np.array([20,300,100,400,60])

age

salary

plt.bar(age,salary)

plt.bar(age,salary,color='red')
plt.xlabel('Age')
plt.ylabel('Salary')
plt.show()

plt.bar(age,salary,color='red')
plt.title('age v/s salary of children')
plt.xlabel('Age')
plt.ylabel('Salary')
plt.show()

plt.scatter(age,salary)
plt.xlabel('Age')
plt.ylabel('Salary')
plt.show()

plt.plot(age,salary,color='red')
plt.title("children salary")
plt.xlabel('Age')
plt.ylabel('Salary')
plt.show()

plt.plot(age,salary,ls='--',lw=1,marker='*',markerfacecolor='green',markersize=20)
plt.title("children salary")
plt.xlabel('Age')
plt.ylabel('Salary')
plt.show()

plt.pie(salary)
plt.show

#SUBPLOT

plt.subplot(1,2,1) #1st row, number of columns, graph 1
plt.scatter(age,salary)
plt.title("children salary")
plt.xlabel("age")
plt.ylabel("salary")

plt.subplot(1,2,2) #1st row, number of columns, graph 2
plt.bar(age,salary)
plt.title("cbar salary")
plt.xlabel("age")
plt.ylabel("salary")
plt.tight_layout()
plt.show

plt.subplot(2,1,1)
plt.scatter(age,salary)
plt.title("children salary")
plt.xlabel("age")
plt.ylabel("salary")

plt.subplot(2,1,2)
plt.bar(age,salary)
plt.title("cbar salary")
plt.xlabel("age")
plt.ylabel("salary")

plt.tight_layout()
plt.show

plt.subplot(1,3,1)
plt.scatter(age,salary)
plt.title("cscatter salary")
plt.xlabel("age")
plt.ylabel("salary")

plt.subplot(1,3,2)
plt.bar(age,salary)
plt.title("cbar salary")
plt.xlabel("age")
plt.ylabel("salary")

plt.subplot(1,3,3)
plt.plot(age,salary)
plt.title("cplot salary")
plt.xlabel("age")
plt.ylabel("salary")

plt.tight_layout()
plt.show

fig=plt.figure()
axes=fig.add_axes([0.1,0.1,0.8,0.8]) #defining axes: left margin, bottom margin, width, height

#LEFT MARGIN, BOTTOM MARGIN, WIDTH, HEIGHT

axes.plot(age,salary)
axes.set_title("created plot")
axes.set_xlabel('age')
axes.set_ylabel('salary')
plt.show

fig

fig=plt.figure(figsize=(10,8))
axes1=fig.add_axes([0,0,1,1])
axes2=fig.add_axes([0.2,0.2,0.4,0.4])
axes1.plot(age, salary)
axes2.plot(age,salary,color='red')

plt.show

fig,axes=plt.subplots(nrows=1,ncols=4,figsize=(6,3))
axes[0].plot(age,salary)
axes[1].plot(age,salary,color='red')
axes[2].plot(age,salary,color='green')
axes[3].plot(age,salary,color='pink')

plt.tight_layout
plt.show

type(axes)

incentives=np.array([20,10,40,60,15])

fig=plt.figure()
axes=fig.add_axes([0,0,1,1])
axes.plot(age,salary,label='age v/s salary')
axes.plot(age,incentives,label='age v/s incentives')

plt.legend(loc=0)#places legend on the plot, as in to accomodate, and loc=0 means row's best location
plt.show

