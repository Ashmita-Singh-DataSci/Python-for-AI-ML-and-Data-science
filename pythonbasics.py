# -*- coding: utf-8 -*-
"""PYTHONBASICS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NvpInu53HIDuDcbrFmqDJO2_C6qAfRX0
"""

'''
WELCOME TO PYTHON. HERE YOU'LL REVISE OR LEARN THE BASICS

RULES

1. Numbers can be calculated simply, but to represent or print strings, a single quotation mark is necessary.
   like
   print('hi')

2. To print variable, you don't need a quotation mark, f
   like
   A=10
   print(A)

3. To know type of the variable, just
   A=10
   type(A)

4. If you enclose a number with single quotation mark, it will be counted as a string and won't work with
  arithmatic operators.
  like
  A=10, B='20'
  A+B=ERROR
  A+INT(B)---->typecasting = 30

5. REMEMBER====>
   LIST = [],
   DICTIONARY = {key:value}
   TUPLE = ()
   SET = {} (values are immutable, cant be changed later in respect to the orignal set)

6. To know how many items are in a list, you use
   len(list) (or whatever name you gave to your list, this also works with dictionaries and tuples)

7. INDEX always starts with 0. like
  list = [2,3,4,5]
  then its index would be [0,1,2,3]
  By specifying index, youll know whats the element,
  like list[2]
  output= 4

  you can also see which element has what index like
  list.index(3)

  changing an element in a list
  list[2]='dodo'
  ouput= [2,3,dodo,5]

  rest you'll learn as you dive deep. hint : its simple

'''
print('hi')

2+6

5-2

5*2

4/2

4%2

A = 10
print(A)

type(A)

B = 7.4
type(B)

C = 'Ashmita'
type(C)

A + B

A - B

D = '22'

type(D)

#list
List = [2,3,44,55,66]

type(list)

#string list
Slist = [ 'st','ri','ing','characters']

#mixed klist
Mlist = ['dodo', '500', '44.5']

Mlist

List

Slist

len(Slist)

len(list)

List

List[0]

List[3]

List.index(44)

List[1] = 'dodo'

List

List.insert(4, 'Dida')

List

List.remove('Dida')

List

List.remove(2)

List.pop()

List.append(77)

List.remove(44)

List

List.append(88)
List.append(74)

List

List[0:4]

List[0:]

List[:3]

Nest = [22,445,65, [22,6]]

len(Nest)

Nest[3][1]

nest1 = [65, 34, 590, [23, 4, 7, ['target']]]

len(nest1)

nest1[3][3][0]



#dictionary
d = {'name':'ldina','city':'nagpur','mobile':'837955','age':'20'}

type(d)

d.keys()

d.values()

d['mobile']

d['salary']='500006'

d

d['salary']

d1 = {'key1':[23,56,78,90]}

d1

d1['key1'][1]

d2 = {'key1':{'innerkey':[20,30,60,40,80]}}

d2['key1']['innerkey'][2]

#SETS
# sets are like lists but does not take duplicates and sort data.

s = {23,4,7,8,4,4,4,8,8,8,9,3,3,7,1,1}

s

len(s)

#typecasting
s1 = list(s)

type(s)

s

type(s1)

#tuples: immutable data

T = (8,8,7,44,55)

type(T)